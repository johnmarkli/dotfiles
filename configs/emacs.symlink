;; Bootstrap `use-package'
(require 'package)
(setq package-enable-at-startup nil)

(setq package-archives (append package-archives
			       '(("org" . "http://orgmode.org/elpa/")
				 ("melpa" . "http://melpa.org/packages/"))))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(use-package diminish :ensure t)

;; Enable use-package
(eval-when-compile
  (require 'use-package))
(require 'diminish)                ;; if you use :diminish
(require 'bind-key)                ;; if you use any :bind variant

(if (member "Input" (font-family-list))
    (set-frame-font "InputMonoNarrow 12" nil t))

(when (window-system)
  (tool-bar-mode -1)
  (scroll-bar-mode -1))

;; Window management
(defun delete-window-balance ()
  "Delete window and rebalance the remaining ones."
  (interactive)
  (delete-window)
  (balance-windows))
(defun split-window-below-focus ()
  "Split window horizontally and move focus to other window."
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
 
(defun split-window-right-focus ()
  "Split window vertically and move focus to other window."
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))

;; Put autosave files (ie #foo#) and backup files (ie foo~) in ~/.emacs.d/.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(auto-save-file-name-transforms (quote ((".*" "~/.emacs.d/autosaves/\\1" t))))
 '(backup-directory-alist (quote ((".*" . "~/.emacs.d/backups/"))))
 '(global-display-line-numbers-mode nil)
 '(line-number-mode nil)
 '(markdown-command "pandoc" t)
 '(org-agenda-files (quote ("~/org/1.org")))
 '(package-selected-packages
   (quote
    (flycheck markdown-mode dired-sidebar dockerfile-mode go-mode reveal-in-osx-finder emojify helm-projectile dracula-theme helm monokai htmlize org-bullets magit projectile evil-visual-mark-mode))))

;; create the autosave dir if necessary, since emacs won't.
(make-directory "~/.emacs.d/autosaves/" t)

(setq vc-follow-symlinks nil)
(require 'ox-md)

(setq ls-lisp-dirs-first t)
(setq ls-lisp-use-insert-directory-program nil)
(require 'ls-lisp)

;; Terminal settings
(setq explicit-shell-file-name "/bin/bash")
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
(defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
  (if (memq (process-status proc) '(signal exit))
      (let ((buffer (process-buffer proc)))
        ad-do-it
        (kill-buffer buffer))
    ad-do-it))
(ad-activate 'term-sentinel)


(use-package evil
  :ensure t
  :init
  (setq evil-want-C-u-scroll t)
  :config
  (evil-mode))

(evil-set-initial-state 'term-mode 'emacs)
(evil-define-key 'normal markdown-mode-map
       (kbd "<tab>") 'markdown-cycle)

(use-package evil-commentary
  :ensure t
  :config
  (evil-commentary-mode))

(use-package magit
  :ensure t)

(global-set-key (kbd "C-x g") 'magit-status)

(use-package helm
  :demand t
  :init
  (setq helm-M-x-fuzzy-match t)
  (setq helm-buffers-fuzzy-matching t)
  (setq helm-recentf-fuzzy-match    t)
  :bind (("M-x" . helm-M-x)
	 ("C-x b" . helm-mini)
	 ("C-x C-f" . helm-find-files)
	 ("C-x f" . helm-recentf)
	 ("M-y" . 'helm-show-kill-ring)
	 )
  :config
  (helm-mode 1))

(use-package projectile
  :ensure t
  :init
  :config
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (setq projectile-completion-system 'helm)
  (projectile-global-mode)
  (helm-projectile-on)
  (setq projectile-enable-caching nil)
  :diminish (projectile-mode))

(use-package helm-projectile
  :ensure t
  :config
  (helm-projectile-on))

;; (use-package ace-window
;;   :ensure t
;;   :config
;;   (global-set-key (kbd "M-o") 'ace-window)
;;   (global-set-key [remap other-window] 'ace-window))

;;;
;;; Org Mode
;;;
(add-to-list 'load-path (expand-file-name "~/git/org-mode/lisp"))
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
(require 'org)
(with-eval-after-load 'org
  (org-babel-do-load-languages 'org-babel-load-languages '((ruby . t))))
(setq org-log-done 'time)
(setq org-ellipsis "â¤µ")
;;
;; Stan
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-ca" 'org-agenda)

(use-package org-bullets
  :ensure t
  :commands (org-bullets-mode)
  :init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(use-package htmlize
  :ensure t)

(use-package reveal-in-osx-finder
  :ensure t)

(use-package go-mode
  :ensure t)

(use-package dockerfile-mode
  :ensure t)

(use-package exec-path-from-shell
  :ensure t
  :if (memq window-system '(mac ns))
  :config
  (setq exec-path-from-shell-arguments '("-l"))
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-env "GOROOT")
  (exec-path-from-shell-copy-env "GOPATH"))

(use-package emojify
  :ensure t
  :init (add-hook 'after-init-hook #'global-emojify-mode))

(use-package dired-subtree
  :ensure t)

(use-package dired-sidebar
  :ensure t
  :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
  :commands (dired-sidebar-toggle-sidebar))

(when (string= system-type "darwin")
  (setq dired-use-ls-dired nil))

(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))

(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

;; (use-package molokai-theme
;;   :ensure t
;;   :init
;;   (load-theme 'molokai-theme-kit t))
(use-package dracula-theme
  :ensure t
  :load-path "themes"
  :init
  ;; (setq molokai-theme-kit t)
  :config
  (load-theme 'dracula t)
  )


(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

